{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","services/api.ts","services/normalizeData.ts","components/FindMovie/FindMovie.tsx","custom-hooks/useFetch.ts","App.tsx","index.tsx"],"names":["MovieCard","React","memo","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","getMovie","query","fetch","then","res","json","catch","Response","Error","normalizeData","data","Poster","Title","Plot","imdbID","FindMovie","onMovieAdition","useState","setTitle","setMovie","isError","setIsError","isLoading","setIsLoading","fetchMovie","a","trim","response","useFetch","handleSubmitForm","event","preventDefault","onSubmit","htmlFor","type","id","placeholder","value","onChange","target","classNames","disabled","onClick","App","setMovies","handleMovieAdition","useCallback","newMovie","some","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"wUAQaA,EAA6BC,IAAMC,MAC9C,gBAAGC,EAAH,EAAGA,MAAH,OACE,sBAAKC,UAAU,OAAO,UAAQ,YAA9B,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,gBAAlB,SACE,qBACE,UAAQ,cACRC,IAAKF,EAAMG,OACXC,IAAI,kBAIV,sBAAKH,UAAU,eAAf,UACE,sBAAKA,UAAU,QAAf,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,iBAAlB,SACE,qBACEC,IAAI,wBACJE,IAAI,aAIV,qBAAKH,UAAU,gBAAf,SACE,mBAAGA,UAAU,aAAa,UAAQ,aAAlC,SAAgDD,EAAMK,aAI1D,sBAAKJ,UAAU,UAAU,UAAQ,mBAAjC,UACGD,EAAMM,YACP,uBACA,mBAAGC,KAAMP,EAAMQ,QAAS,UAAQ,WAAhC,8BC5BGC,EAA8BX,IAAMC,MAC/C,gBAAGW,EAAH,EAAGA,OAAH,OACE,qBAAKT,UAAU,SAAf,SACGS,EAAOC,KAAI,SAAAX,GAAK,OACf,cAAC,EAAD,CAEEA,MAAOA,GADFA,EAAMY,gB,+CCTd,SAASC,EAASC,GACvB,OAAOC,MAAM,GAAD,OAHE,2CAGF,cAAiBD,IAC1BE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBC,OAAM,iBAAO,CACZC,SAAU,QACVC,MAAO,uBCRN,SAASC,EAAcC,GAC5B,IACEC,EAIED,EAJFC,OACAC,EAGEF,EAHFE,MACAC,EAEEH,EAFFG,KACAC,EACEJ,EADFI,OAOF,MAAO,CACLtB,MAAOoB,EACPnB,YAAaoB,EACbvB,OAPwB,QAAXqB,EACX,4DACAA,EAMFhB,QAAQ,8BAAD,OAAgCmB,GACvCf,OAAQe,GCTL,IAAMC,EAA6B9B,IAAMC,MAC9C,YAAyB,IAAtB8B,EAAqB,EAArBA,eACD,EAA0BC,mBAAiB,IAA3C,mBAAOzB,EAAP,KAAc0B,EAAd,KACA,EAA0BD,mBAAuB,MAAjD,mBAAO9B,EAAP,KAAcgC,EAAd,KACA,EAA8BF,oBAAkB,GAAhD,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAkCJ,oBAAkB,GAApD,mBAAOK,EAAP,KAAkBC,EAAlB,KACMC,ECbH,WACL,IAAMA,EAAU,uCAAG,WACjBvB,EACAkB,EACAE,EACAE,GAJiB,eAAAE,EAAA,yDAMZxB,EAAMyB,OANM,uBAOfL,GAAW,GAPI,iCAYjBE,GAAa,GAZI,kBAcQvB,EAASC,EAAMyB,QAdvB,YAgBX,UAFEC,EAdS,gCAiBP,IAAInB,MAAMmB,EAASnB,OAjBZ,QAoBfW,EAASV,EAAckB,IApBR,kDAsBfN,GAAW,GAtBI,yBAwBfE,GAAa,GAxBE,6EAAH,4DA4BhB,OAAOC,EDhBcI,GAObC,EAAgB,uCAAG,WAAOC,GAAP,SAAAL,EAAA,6DACvBK,EAAMC,iBADiB,SAEjBP,EAAWhC,EAAO2B,EAAUE,EAAYE,GAFvB,2CAAH,sDAWtB,OACE,qCACE,uBACEnC,UAAU,aACV4C,SAAUH,EAFZ,UAIE,sBAAKzC,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAQ6C,QAAQ,cAAjC,yBAIA,qBAAK7C,UAAU,UAAf,SACE,uBACE,UAAQ,aACR8C,KAAK,OACLC,GAAG,cACHC,YAAY,0BACZhD,UAAU,kBACViD,MAAO7C,EACP8C,SAnCa,SAACR,GACxBZ,EAASY,EAAMS,OAAOF,OACtBhB,GAAW,QAqCJD,GACC,mBAAGhC,UAAU,iBAAiB,UAAQ,eAAtC,qDAMJ,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wBACE,UAAQ,eACR8C,KAAK,SACL9C,UAAWoD,IAAW,kBAAmB,CACvC,aAAclB,IAEhBmB,UAAWjD,EANb,SAQIL,EAEE,eADA,mBAMPA,GACC,qBAAKC,UAAU,UAAf,SACE,wBACE,UAAQ,YACR8C,KAAK,SACL9C,UAAU,oBACVsD,QAAS,kBA1DrB1B,EA0DgD7B,GAzDhD+B,EAAS,SACTC,EAAS,OAoDC,qCAaPhC,GACC,sBAAKC,UAAU,YAAY,UAAQ,mBAAnC,UACE,oBAAIA,UAAU,QAAd,qBACA,cAAC,EAAD,CAAWD,MAAOA,aE9FjBwD,EAAM,WACjB,MAA4B1B,mBAAkB,IAA9C,mBAAOpB,EAAP,KAAe+C,EAAf,KAEMC,EAAqBC,uBAAY,SAACC,GACnBlD,EAAOmD,MAAK,SAAA7D,GAAK,OAAIA,EAAMY,SAAWgD,EAAShD,WAGhE6C,GAAU,SAAAK,GAAa,4BAAQA,GAAR,CAAuBF,SAE/C,CAAClD,IAEJ,OACE,sBAAKT,UAAU,OAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAYS,OAAQA,MAGtB,qBAAKT,UAAU,UAAf,SACE,cAAC,EAAD,CAAW4B,eAAgB6B,UCpBnCK,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.9289ca97.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = React.memo(\n  ({ movie }) => (\n    <div className=\"card\" data-cy=\"movieCard\">\n      <div className=\"card-image\">\n        <figure className=\"image is-4by3\">\n          <img\n            data-cy=\"moviePoster\"\n            src={movie.imgUrl}\n            alt=\"Film logo\"\n          />\n        </figure>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-left\">\n            <figure className=\"image is-48x48\">\n              <img\n                src=\"images/imdb-logo.jpeg\"\n                alt=\"imdb\"\n              />\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n          </div>\n        </div>\n\n        <div className=\"content\" data-cy=\"movieDescription\">\n          {movie.description}\n          <br />\n          <a href={movie.imdbUrl} data-cy=\"movieURL\">\n            IMDB\n          </a>\n        </div>\n      </div>\n    </div>\n  ),\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = React.memo(\n  ({ movies }) => (\n    <div className=\"movies\">\n      {movies.map(movie => (\n        <MovieCard\n          key={movie.imdbId}\n          movie={movie}\n        />\n      ))}\n    </div>\n  ),\n);\n","// import { Movie } from '../types/Movie';\nimport { MovieData } from '../types/MovieData';\nimport { ResponseError } from '../types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=f68e39dd';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { Movie } from '../types/Movie';\nimport { MovieData } from '../types/MovieData';\n\nexport function normalizeData(data: MovieData): Movie {\n  const {\n    Poster,\n    Title,\n    Plot,\n    imdbID,\n  } = data;\n\n  const poster = Poster === 'N/A'\n    ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n    : Poster;\n\n  return {\n    title: Title,\n    description: Plot,\n    imgUrl: poster,\n    imdbUrl: `https://www.imdb.com/title/${imdbID}`,\n    imdbId: imdbID,\n  };\n}\n","import React, { useState } from 'react';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\nimport { useFetch } from '../../custom-hooks/useFetch';\n\ninterface Props {\n  onMovieAdition: (newMovie: Movie) => void;\n}\n\nexport const FindMovie: React.FC<Props> = React.memo(\n  ({ onMovieAdition }) => {\n    const [title, setTitle] = useState<string>('');\n    const [movie, setMovie] = useState<Movie | null>(null);\n    const [isError, setIsError] = useState<boolean>(false);\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const fetchMovie = useFetch();\n\n    const handleTitleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n      setTitle(event.target.value);\n      setIsError(false);\n    };\n\n    const handleSubmitForm = async (event: React.FormEvent) => {\n      event.preventDefault();\n      await fetchMovie(title, setMovie, setIsError, setIsLoading);\n    };\n\n    const handleAddMovieButton = (newMovie: Movie) => {\n      onMovieAdition(newMovie);\n      setTitle('');\n      setMovie(null);\n    };\n\n    return (\n      <>\n        <form\n          className=\"find-movie\"\n          onSubmit={handleSubmitForm}\n        >\n          <div className=\"field\">\n            <label className=\"label\" htmlFor=\"movie-title\">\n              Movie title\n            </label>\n\n            <div className=\"control\">\n              <input\n                data-cy=\"titleField\"\n                type=\"text\"\n                id=\"movie-title\"\n                placeholder=\"Enter a title to search\"\n                className=\"input is-dander\"\n                value={title}\n                onChange={handleTitleInput}\n              />\n            </div>\n\n            {isError && (\n              <p className=\"help is-danger\" data-cy=\"errorMessage\">\n                Can&apos;t find a movie with such a title\n              </p>\n            )}\n          </div>\n\n          <div className=\"field is-grouped\">\n            <div className=\"control\">\n              <button\n                data-cy=\"searchButton\"\n                type=\"submit\"\n                className={classNames('button is-light', {\n                  'is-loading': isLoading,\n                })}\n                disabled={!title}\n              >\n                {!movie\n                  ? 'Find a movie'\n                  : 'Search again'}\n\n              </button>\n            </div>\n\n            {movie && (\n              <div className=\"control\">\n                <button\n                  data-cy=\"addButton\"\n                  type=\"button\"\n                  className=\"button is-primary\"\n                  onClick={() => handleAddMovieButton(movie)}\n                >\n                  Add to the list\n                </button>\n              </div>\n            )}\n          </div>\n        </form>\n\n        {movie && (\n          <div className=\"container\" data-cy=\"previewContainer\">\n            <h2 className=\"title\">Preview</h2>\n            <MovieCard movie={movie} />\n          </div>\n        )}\n      </>\n    );\n  },\n);\n","import { getMovie } from '../services/api';\nimport { normalizeData } from '../services/normalizeData';\nimport { Movie } from '../types/Movie';\n\nexport function useFetch() {\n  const fetchMovie = async (\n    query: string,\n    setMovie: React.Dispatch<React.SetStateAction<Movie | null>>,\n    setIsError: React.Dispatch<React.SetStateAction<boolean>>,\n    setIsLoading: React.Dispatch<React.SetStateAction<boolean>>,\n  ) => {\n    if (!query.trim()) {\n      setIsError(true);\n\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const response = await getMovie(query.trim());\n\n      if ('Error' in response) {\n        throw new Error(response.Error);\n      }\n\n      setMovie(normalizeData(response));\n    } catch (error) {\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return fetchMovie;\n}\n","import { useCallback, useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const handleMovieAdition = useCallback((newMovie: Movie) => {\n    const checkMovie = movies.some(movie => movie.imdbId === newMovie.imdbId);\n\n    if (!checkMovie) {\n      setMovies(currentMovies => [...currentMovies, newMovie]);\n    }\n  }, [movies]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie onMovieAdition={handleMovieAdition} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}